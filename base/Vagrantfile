# -*- mode: ruby  encoding: iso-8859-1  -*-
# vi: set ft=ruby :
# **************************************************************************
# Create a CentOS 6 virtual machine with all the software needed to
# run Spark + notebooks
# **************************************************************************

vagrant_command = ARGV[0]

# Python version for which we will be creating the notebook environment (2 or 3)
python_version = '3'

python_version_full = python_version == '3' ? '3.5' : '2.7'

# --------------------------------------------------------------------------
# Variables defining the installation of Spark

# The version of Spark we will download & install
spark_version = '2.1.0'
spark_name = 'spark-' + spark_version + '-bin-custom'
#spark_name = 'spark-' + spark_version + '-bin-hadoop2.6'

# The place where Spark will be deployed inside the local machine
# There is usually no need to change this
spark_basedir = '/opt/spark'

# An artifact repository where some custom-built files may be kept
repo_base = 'http://artifactory.hi.inet/artifactory/vagrant-machinelearning/buildfiles/'

# --------------------------------------------------------------------------
# Some variables that affect Vagrant execution

# Check the command requested
vagrant_command = ARGV[0]

# Conditionally activate some provision sections
provision_run_dl = (ENV['PROVISION_DL'] == '1') || \
        (vagrant_command == 'provision' && ARGV.include?('61.dl'))
provision_run_clean = (ENV['PROVISION_CLEAN'] == '1') || \
        (vagrant_command == 'provision' && ARGV.include?('70.clean'))

provision_run_dl = true

# --------------------------------------------------------------------------
# Vagrant configuration

# The "2" in Vagrant.configure configures the configuration version
Vagrant.configure(2) do |config|

  # This is to help later when packaging: don't change the insecure key
  config.ssh.insert_key = false
  #config.ssh.forward_agent = true
  #config.ssh.username = "ubuntu"
  
  config.vm.define "vm-spark-base64" do |vmconf|
     
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.

    # The base box we will be using. 
    # Available at https://atlas.hashicorp.com/search
    vmconf.vm.box = "bento/ubuntu-16.04"
    #vmconf.vm.box_version = "2.2.9"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # vmconf.vm.box_check_update = false

    # Put into the usual synced folder a subdirectory
    vmconf.vm.synced_folder ".", "/vagrant", disabled: true
    vmconf.vm.synced_folder "vmfiles", "/vagrant",
    disabled: false
    # owner: spark_username
    #auto_mount: false
  
    # Customize the virtual machine: hostname & RAM
    vmconf.vm.hostname = "vgr-spark-base64"
    vmconf.vm.provider :virtualbox do |vb|
      # Set the hostname in the provider
      vb.name = vmconf.vm.hostname.to_s
      # Customize the amount of memory on the VM
      vb.memory = "1024"
      # Display the VirtualBox GUI when booting the machine
      #vb.gui = true
      # A patch for a problem in VirtualBox -- fixed in VB 5.0.28 and 5.1.6
      # see https://github.com/chef/bento/issues/688
      vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    end

    # Networking
    # Declare a public network
    #vmconf.vm.network "public_network", type: "dhcp", bridge: 'Realtek PCIe GBE Family Controller', :mac => "08002710A7ED"

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    #vmconf.vm.network "forwarded_port", guest: port_ipython, host: port_ipython
    #vmconf.vm.network :forwarded_port,
    #host: 4040, 
    #guest: 4040, 
    #auto_correct: true                 # Spark UI (Driver)

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # vmconf.vm.synced_folder "../data", "/vagrant_data"

    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # vmconf.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end
    # Push to artifactory
    #curl -i -u<USERNAME>:<API_KEY> -T <PATH_TO_FILE> "http://artifactory.hi.inet:8081/artifactory/vagrant-machinelearning/{vagrantBoxName.box};box_name={name};box_provider={provider};box_version={version}"

    vmconf.vm.post_up_message = "**** The Vagrant Spark base machine is up"

    # ---------------------------------------------------------------------

    # https://github.com/mitchellh/vagrant/issues/1673
    vmconf.vm.provision "00.fix-tty",
    type: "shell",
    privileged: true,
    inline: "sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
     
    # Install some base software
    # (inc. development environments we need to install some Python packages)
    vmconf.vm.provision "01.base",
    type: "shell",
    privileged: true,
    inline: <<-SHELL
     apt-get update -y
     # Make some subdirectories in the vagrant home dir
     sudo -u vagrant -i mkdir bin install tmp
     # Install some basic packages + dev libraries to compile R/Python pkgs
     #XXXapt install gcc gcc-c++ freetype-devel libpng-devel libffi-devel
     #XXXapt install libopenblas-dev
     # General utility programs
     apt-get install -y emacs-nox virtualenv
     # Other
     #XXX(cd /etc/yum.repos.d; wget http://www.graphviz.org/graphviz-rhel.repo)
     apt-get install -y graphviz
     # customize locales
     #locale-gen "es_ES.UTF-8" "es_AR.UTF-8" "es_CL.UTF-8" "pt_BR.UTF-8" "de_DE.UTF-8"
     # dpkg-reconfigure locales
    SHELL

    # .........................................
    vmconf.vm.provision "02.jdk",
    type: "shell", 
    privileged: true, 
    inline: "apt-get install -y openjdk-8-jdk-headless"
   # http://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-instead

    # Install R from EPEL
    vmconf.vm.provision "03.R",
    type: "shell", 
    privileged: true, 
    inline: <<-SHELL
     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
     add-apt-repository -u "deb http://cran.es.r-project.org/bin/linux/ubuntu xenial/"
     apt-get install -y r-recommended
     #(r-base-dev)
    SHELL

    # Install some R packages & the IR kernel for Jupyter
    vmconf.vm.provision "04.Rpkg",
    type: "shell", 
    privileged: true, 
    inline: <<-SHELL
     RDIR=$(Rscript -e "for (p in .libPaths()) { if( startsWith(p,'/usr/local')) { cat(p); break; }}")
     mkdir -p $RDIR
     echo "Installing R packages: rmarkdown, magrittr, dplyr, tidyr, data.table, ggplot2"
     apt-get install -y libpq-dev libcurl4-openssl-dev libzmq5 libmariadb-client-lgpl-dev libxml2-dev
     #yum -y install libcurl-devel libxml2-devel czmq-devel mysql-devel postgresql-devel cairo-devel libssh2-devel
     for pkg in "'rmarkdown','magrittr'" \
                "'dplyr','tidyr'" \
                "'data.table','ggplot2'" \
                "'caret'"
     do
         echo -e "\nInstalling R packages: $pkg"
         Rscript -e "install.packages(c($pkg),dependencies=TRUE,repos=c('http://ftp.cixug.es/CRAN/','http://cran.es.r-project.org/'),quiet=FALSE)"
     done

     echo "Installing IRkernel"
     Rscript -e 'install.packages( c("crayon","devtools"),repos=c("http://ftp.cixug.es/CRAN/","http://cran.es.r-project.org/"),quiet=FALSE)'
     Rscript -e 'devtools::install_github( paste0("IRkernel/",c("repr","IRdisplay","IRkernel")) )'

     echo "Installing sparklyr"
     # As of March 2017, we need to install from git to have support for 2.1
     Rscript -e 'devtools::install_github("rstudio/sparklyr")'

     apt-get remove -y libpq-dev libcurl4-openssl-dev libmariadb-client-lgpl-dev libxml2-dev
     #yum erase -y postgresql-devel mysql-devel cairo-devel gl-manpages glib2-devel libssh2-devel
    SHELL


    # .........................................
    # Create a Python virtualenv and install wrappers to point there
    vmconf.vm.provision "11.python.venv",
    type: "shell", 
    privileged: false,
    args: [ python_version, python_version_full ],
    inline: <<-SHELL
     sudo rm -rf /opt/ipnb$1
     sudo mkdir -m 775 /opt/ipnb$1
     sudo chown vagrant.vagrant /opt/ipnb$1
     sudo ln -s /opt/ipnb$1 /opt/ipnb

     sudo apt-get install -y libpython${2}-dev

     # Create a virtualenv
     virtualenv -p python$1 /opt/ipnb$1 --no-site-packages

     cd $HOME/bin
     rm -f python python$1 pip
     ln -s /opt/ipnb$1/bin/{python,python$2,pip} .
    SHELL


    # .........................................
    # In the virtualenv, install the Python packages to use in the Notebooks
    # Plus a few ML-related more
    vmconf.vm.provision "14.python.pkg",
    type: "shell", 
    keep_color: true,
    privileged: false, 
    inline: <<-SHELL
      sudo apt-get install -y libopenblas-dev libhdf5-dev libfreetype6-dev
      #yum -y install openblas-devel hdf5-devel

      cd /opt/ipnb/bin
      ./pip install --upgrade pip
      ./pip install --upgrade setuptools
      # we install this is to avoid InsecurePlatformWarning messages
      ./pip install 'requests[security]'

      ./pip install pyparsing
      ./pip install matplotlib
      ./pip install ipython
      ./pip install jupyter     
      ./pip install notebook
      ./pip install ipywidgets

      ./pip install h5py
      ./pip install tables

      ./pip install pandas
      ./pip install bottleneck
      ./pip install numexpr
      ./pip install statsmodels
      ./pip install scikit-learn
      ./pip install gensim
      ./pip install networkx
      ./pip install mpld3
      ./pip install seaborn

      ./pip install pydot-ng
      ./pip install graphviz

      ./pip install hdfs
      ./pip install xlrd
      ./pip install openpyxl

      # We don't need this anymore
      sudo apt-get remove -y libhdf5-dev libfreetype6-dev
      #sudo yum -y erase hdf5-devel

      # Enable ipywidgets
      ./jupyter nbextension enable --py widgetsnbextension --sys-prefix
    SHELL

    vmconf.vm.provision "15.pylucene",
    type: "shell",
    keep_color: true,
    privileged: false,
    inline: <<-SHELL
    VENV=/opt/ipnb/bin

    mkdir -p Soft
    cd Soft
    PKG=pylucene-6.5.0
    PKGFILE=$PKG-src.tar.gz
    wget http://apache.rediris.es/lucene/pylucene/$PKGFILE
    tar zxvf $PKGFILE
    cd $PKG
 
    # Build JCC
    export JCC_JDK=$(type -p javac|xargs readlink -f|xargs dirname|xargs dirname)
    # http://mail-archives.apache.org/mod_mbox/lucene-pylucene-dev/201704.mbox/browser
    patch -p0 <<EOF
--- jcc/setup.p.old	2017-05-18 11:08:48.644087400 +0200
+++ jcc/setup.py	2017-05-18 11:31:22.307551100 +0200
@@ -360,8 +360,8 @@
                           '-current_version', jcc_ver,
                           '-compatibility_version', jcc_ver]
         elif platform == 'linux':
-            kwds["extra_link_args"] = \
-                lflags + ['-lpython%s.%s' %(sys.version_info[0:2])]
+            #kwds["extra_link_args"] = \
+            #    lflags + ['-lpython%s.%s' %(sys.version_info[0:2])]
             kwds["force_shared"] = True    # requires jcc/patches/patch.43
         elif platform in IMPLIB_LFLAGS:
             jcclib = 'jcc%s%s.lib' %(py_version_suffix, debug and '_d' or '')
EOF
    cd jcc
    $VENV/bin/python setup.py build
    $VENV/bin/python setup.py install
    cd ..

    # build pylucene
    sudo apt-get install -y ant
    export PREFIX_PYTHON=$VENV
    export ANT="JAVA_HOME=$JCC_JDK /usr/bin/ant"
    export PYTHON="$PREFIX_PYTHON/bin/python3"
    export "JCC=$PYTHON -m jcc --shared"
    export NUM_FILES=8
    make
    make bdist

    # install
    $VENV/bin/easy_install dist/*.egg

    SHELL

    # .........................................
    # Install Scala
    vmconf.vm.provision "20.scala",
    type: "shell", 
    privileged: false,
    keep_color: true,    
    args: [ spark_version, spark_name, spark_basedir ],
    inline: <<-SHELL
      # download & install Scala
      cd install
      VERSION=2.11.8
      echo "Downloading Scala $VERSION"
      wget --no-verbose http://downloads.lightbend.com/scala/$VERSION/scala-$VERSION.deb
      sudo dpkg -i scala-$VERSION.deb
    SHELL


    # .........................................
    # Install a pre-built Spark
    # We can either install a version we download from a Spark website mirror, or
    # a locally built custom version
    vmconf.vm.provision "30.spark",
    type: "shell",
    privileged: false,
    keep_color: true,
    args: [ spark_version, spark_name, spark_basedir, repo_base ],
    inline: <<-SHELL

      # download & install Spark
      sudo bash -c "mkdir -m 775 '$3'; chown vagrant.vagrant '$3'; cd $3; rm -f current; ln -s $2/ current"
      case $2 in
        *custom) 
           file="/vagrant/spark/$2.tgz";;
        *) echo "Downloading $2.tgz"
           cd install
           wget --no-verbose "http://apache.rediris.es/spark/spark-$1/$2.tgz"
           file=$2.tgz;;
      esac
      tar zxvf "$file" -C "$3"
      sudo sh -c "echo 'PATH=\\$PATH:$3/current/bin' > /etc/profile.d/spark-path.sh"

      # Create the directory to place Hadoop config
      mkdir -p "$3/current/conf/hadoop"
      sudo rm -f /etc/hadoop
      sudo ln -s "$3/current/conf/hadoop" /etc/hadoop

      # Ensure we will be able to write to the Notebook log & run directories
      for d in /var/log /var/run; do
        test -d $d/ipnb || sudo mkdir -m 1777 $d/ipnb
      done

      # Add to the R library directory a link to the installed SparkR package
      RDIR=$(Rscript -e "for (p in .libPaths()) { if( startsWith(p,'/usr/local')) { cat(p); break; }}")
      if [ -d $RDIR ]; then
         sudo rm -f "$RDIR/SparkR"
         sudo ln -s "$3/$2/R/lib/SparkR/" "$RDIR"
      fi
    SHELL

    # .........................................
    # No Spark add-ons installed
    #  * spark-csv is now part of Spark 2.x
    #  * GraphFrames & Kafka Streaming can be declared as packages in
    #    Spark config and they will be automatically downloaded

    # .........................................
    # Install the Spark configuration files for the different modes
    vmconf.vm.provision "32.spark.cfg",
    type: "file",
    source: 'buildfiles/conf',
    destination: '/opt/spark/current'

    # .........................................
    # Install the IPython Spark notebook daemon script
    vmconf.vm.provision "33.notebook.script",
    type: "file",
    source: "buildfiles/jupyter-notebook-mgr",
    destination: "/opt/ipnb/bin/jupyter-notebook-mgr"

    # .........................................
    # Install the Systemd unit file to manage the notebook server
    vmconf.vm.provision "34a.notebook.systemd",
    type: "file",
    source: "buildfiles/notebook.service",
    destination: "/tmp/notebook.service"

    vmconf.vm.provision "34b.notebook.systemd",
    type: "shell",
    privileged: true,
    inline: 'K=notebook.service; D=/etc/systemd/system; mv /tmp/$K $D; chown root.root $D/$K'

    # .........................................
    # Install the Pyspark script wrapper
    vmconf.vm.provision "35.pyspark.wrapper",
    type: "file",
    source: "buildfiles/pyspark-ipnb",
    destination: "/opt/ipnb/bin/pyspark-ipnb"

    # .........................................
    # Install the Toree Scala/Spark kernel
    # We use a custom-built version compiled from master, to make sure that
    # PR100 (https://github.com/apache/incubator-toree/pull/100), which fixes
    # syntax highlighting, is included
    vmconf.vm.provision "36.scala.kernel",
    type: "shell",
    privileged: false,
    keep_color: true,
    args: [ spark_version, spark_name, spark_basedir, repo_base ],
    inline: <<-SHELL
      PKG=toree-0.2.0.dev1.tar.gz
      echo "Installing the (Scala) Spark kernel $PKG"
      # -- From PyPi
      #pip install toree
      # -- From the developer snapshot
      #pip install https://dist.apache.org/repos/dist/dev/incubator/toree/0.2.0/snapshots/dev1/toree-pip/$PKG
      # -- From a local repository
      #cd $HOME/install
      #wget --no-verbose "${4}spark-kernel/$1/$PKG"
      #pip install $PKG
      # -- From a locally available file
      pip install /vagrant/toree/$PKG 
    SHELL


    # .........................................
    # Install some files for notebooks

    # a custom css
    vmconf.vm.provision "40.notebook.css",
    type: "file",
    source: "buildfiles/style/notebook-custom.css",
    destination: "/opt/ipnb#{python_version}/lib/python#{python_version_full}/site-packages/notebook/static/custom/custom.css"

    # the notebook extensions
    vmconf.vm.provision "41.notebook.ext",
    type: 'file',
    source: 'buildfiles/nbextensions',
    destination: "/opt/ipnb#{python_version}/share/jupyter"

    # a slightly modified Jupyter icon
    # (so that it's easier to identify browser tabs belonging to the VM)
    vmconf.vm.provision "42.icon.jupyter",
    type: "file",
    source: 'buildfiles/style/jupyter-favicon-custom.ico',
    destination: "/opt/ipnb#{python_version}/lib/python#{python_version_full}/site-packages/notebook/static/base/images/favicon-custom.ico"

    # icons for Pyspark & Scala kernels
    vmconf.vm.provision "43.icon.kernel",
    type: "file", 
    source: 'buildfiles/style/kernel-icons',
    destination: spark_basedir


    # .........................................
    # the theanorc file
    vmconf.vm.provision "50a.theanorc",
    type: 'file',
    source: 'buildfiles/theanorc',
    destination: '/tmp/theanorc'

    vmconf.vm.provision "50b.theanorc",
    type: 'shell',
    privileged: true,
    inline: 'cp -p /tmp/theanorc /etc/theanorc'

    if (provision_run_dl)
      vmconf.vm.provision "61.dl",
      type: "shell",
      privileged: false,
      keep_color: true,
      args: [ python_version ],
      inline: <<-SHELL
         pip install --upgrade tensorflow
         pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git
         pip install --upgrade keras quiver
       SHELL
    end

    
    # Clean
    if (provision_run_clean)
      vmconf.vm.provision "70.clean",
      type: "shell",
      privileged: true,
      inline: <<-SHELL
        echo "Cleaning temporal & installation files"
        HH=/home/vagrant
        rm -rf $HH/.cache/pip $HH/.bash_history $HH/install/*
        rm -rf /opt/ipnb/share/jupyter/nbextensions/.git*
        rm -rf /tmp/Rtmp* /var/tmp/yum*
        apt-get autoclean -y
        apt-get clean -y 
        apt-get autoremove -y

        # Remove bash history for root
        unset HISTFILE
        rm -f /root/.bash_history

        # Cleanup log files
        echo "Removing logfiles"
        find /var/log -type f | while read f; do echo -ne '' > $f; done;

        # Remove all temporal files
        rm -rf /tmp/*

        # Zero free space
        echo "Whiteout root & boot partitions"
        for fs in / /boot/
        do
           count=$(df --sync -kP / | tail -n1  | awk -F ' ' '{print $4}') 
           let count--
           dd if=/dev/zero of=${fs}whitespace bs=1024 count=$count
           rm ${fs}whitespace;
        done
        sync

        # Zero the swap space
        swappart=$(cat /proc/swaps | tail -n1 | awk -F ' ' '{print $1}')
        if [ "$swappart" != "" ]; then
          swapoff $swappart;
          dd if=/dev/zero of=$swappart;
          mkswap $swappart;
          swapon $swappart;
        fi

      SHELL
    end



  end

end
