# -*- mode: ruby -*-
# vi: set ft=ruby :
# **************************************************************************
# Create a CentOS 6 virtual machine running a Spark Notebook process
# **************************************************************************


# --------------------------------------------------------------------------
# Variables defining the configuration of Spark & notebook 


# This define Spark notebook processing mode: "local" or "yarn"
# It can be changed at runtime by executing "service spark-notebook mode <mode>"
spark_mode = 'local'

# ---- These options are used only when running non-local tasks
# When in YARN mode, this defines the location of the Yarn Resource Manager
spark_yarn_master = 'samson01.hi.inet'
# The location of the Spark History Server
spark_history_server = 'samson03.hi.inet:18080'
# ----

# The port where the notebook process is listening in the virtual machine
# So to access the notebook server, you point to http://<vname>:<port>
port_ipython = 8008

# The version of Spark we will download & install
spark_version = '1.4.1'
spark_name = 'spark-' + spark_version + '-bin-hadoop2.6'

# The place where Spark will be deployed inside the local machine
# There is usually no need to change this
spark_basedir = '/opt/spark'


# --------------------------------------------------------------------------
# Vagrant configuration

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|

  #config.name = "vgr-pyspark"

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # The base box we will be using. 
  # Available at https://atlas.hashicorp.com/search
  #config.vm.box = "chef/centos-6.6"
  config.vm.box = "bento/centos-6.7"
  #config.vm.box = "nrel/CentOS-6.5-x86_64"
  #config.vm.box = "puphpet/centos65-x64"
  #config.vm.box_url = "https://blah/blah"

  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "vmfiles", "/vagrant", disabled: false
  
  # The hostname for the virtual machine 
  config.vm.hostname = "vgr-tid-spark"
  config.vm.provider :virtualbox do |v|
    v.name = config.vm.hostname.to_s
    # Customize the amount of memory on the VM:
    v.memory = "1024"
  end

  config.vm.post_up_message = "**** The Vagrant Spark-Notebook machine is up. Connect to http://localhost:" + port_ipython.to_s

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: port_ipython, host: port_ipython

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # ---------------------------------------------------------------------

  # Install some base CentOS software
  # The development environments we need to install some Python packages
  config.vm.provision "01.BaseSoft", 
   type: "shell", 
   privileged: false, 
   inline: <<-SHELL
     # Make some subdirectories in the vagrant home dir
     mkdir bin install tmp
     # Install some packages     
     sudo yum -y install emacs-nox man
     sudo yum -y install gcc gcc-c++ freetype-devel libpng-devel
     sudo yum -y install redhat-lsb-core
   SHELL

  # .........................................
  # Install Oracle JDK
  # We download Oracle 8 from oracle.com, with the dark magic needed to 
  # accept their license before downloading
  config.vm.provision "02.JDK", 
   type: "shell", 
   inline: <<-SHELL
     cd install
     wget --no-verbose --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u51-b16/jdk-8u51-linux-x64.rpm"
     sudo yum -y install jdk-8u51-linux-x64.rpm
   SHELL
   # http://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-instead
  # http://download.oracle.com/otn-pub/java/jdk/7u71-b14/jdk-7u71-linux-x64.tar.gz
  # https://www.digitalocean.com/community/tutorials/how-to-install-java-on-centos-and-fedora

  # .........................................
  # Install Python 2.7 by using the Sofware Collections (SCL)
  config.vm.provision "03.SCL-python27", type: "shell", inline: <<-SHELL
     sudo yum -y install centos-release-SCL
     sudo yum -y install python27 python27-scipy python27-python-virtualenv
   SHELL

  # .........................................
  # Create a Python 2.7 virtualenv and install wrappers to point there
  # Since Python 2.7 has been installed with SCL, we need extra magic with 
  # LD_LIBRARY_PATH to make it run
  config.vm.provision "04.python27-venv-create", 
   type: "shell", 
   privileged: false,
   inline: <<-SHELL
     sudo rm -rf /opt/ipnb
     sudo mkdir -m 1777 /opt/ipnb

     scl enable python27 'virtualenv /opt/ipnb --system-site-packages'

     # Create a wrapper to execute virtualenv scripts
     mkdir /opt/ipnb/bin/ext
     cd /opt/ipnb/bin/ext
     rm -f ipnb python2.7 pip
     echo 'LD_LIBRARY_PATH=/opt/rh/python27/root/usr/lib64$LD_LIBRARY_PATH${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} exec /opt/ipnb/bin/$(basename $0) "$@"' > wrap
     chmod +x wrap
     # Install some aliases for the wrapper
     for s in python2.7 pip
     do
        ln -s wrap $s 
     done

     # Make some aliases available in the path for the vagrant user
     cd $HOME/bin
     ln -s /opt/ipnb/bin/ext/{python2.7,pip} .
  SHELL
  
  # .........................................
  # In the virtualenv, install the Python libraries to use in the Notebooks
  config.vm.provision "05.notebook-install", 
    type: "shell", 
    keep_color: true,
    privileged: false, 
    inline: <<-SHELL
      pip install --upgrade pip
      pip install --upgrade setuptools
      pip install pyparsing
      pip install matplotlib
      pip install ipython
      pip install jupyter     

      pip install pandas
      pip install scikit-learn
      pip install gensim

      cd /opt/ipnb/bin/ext
      for s in ipython jupyter jupyter-notebook; do
        rm -f $s; ln -s wrap $s
      done
      cd $HOME/bin
      rm -f ipython; ln -s /opt/ipnb/bin/ext/ipython ipython
    SHELL

  # .........................................
  config.vm.provision "XXXXtest", 
   type: "shell", 
   privileged: false, 
   keep_color: true,
   args: [ port_ipython ],
   inline: <<-SHELL
     pip freeze
     whoami
     echo "[$1]"
   SHELL

  # .........................................
  # Install Spark
  config.vm.provision "06.spark-install", 
    type: "shell", 
    privileged: false,
    keep_color: true,    
    args: [ spark_version, spark_name, spark_basedir ],
    inline: <<-SHELL
      # download & install Scala
      cd install
      wget --no-verbose http://downloads.typesafe.com/scala/2.10.5/scala-2.10.5.rpm
      sudo yum -y install scala-2.10.5.rpm

      # download & install Spark
      wget --no-verbose "http://apache.rediris.es/spark/spark-$1/$2.tgz"
      sudo mkdir -m 1777 "$3"
      tar zxvf "$2.tgz" -C "$3"
      sudo sh -c "echo 'PATH=\\$PATH:$3/$2/bin' > /etc/profile.d/spark-path.sh"

     #cat <<-'END' > /opt/spark/$1/conf/spark-env.sh
     #   export LD_LIBRARY_PATH=/opt/rh/python27/root/usr/lib64$LD_LIBRARY_PATH${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
     #   PYSPARK_PYTHON=/opt/ipnb/bin/python2.7
     #END

      # Ensure we will be able to write to the Spark log & run directories
      for d in /var/log /var/run; do
        test -d $d/spark || sudo mkdir -m 1777 $d/spark
      done
  SHELL

  # .........................................
  # Install the Spark notebook daemon script
  config.vm.provision "07.notebook-script", 
    type: "file", 
    source: 'buildfiles/spark-notebook',
    destination: "/opt/ipnb/bin/ext/spark-notebook"

  # .........................................
  # Install the base spark env definition 
  #config.vm.provision "XXXXspark-config-1", 
  #  type: "file", 
  #  source: 'files/spark-env.sh',
  #  destination: spark_basedir + "/" + spark_version + "/conf/spark-env.sh"

  # .........................................
  # Configure IPython Notebook to run Spark jobs
  # Prepared for IPython 4 (so that we configure as a Jupyter app)
  config.vm.provision "08.notebook-config", 
    type: "shell", 
    privileged: false,
    keep_color: true,    
    args: [ port_ipython ],
    inline: <<-SHELL
      test -d /vagrant/IPNB || mkdir /vagrant/IPNB
      test -l IPNB || { rm -f IPNB; ln -s /vagrant/IPNB/ IPNB; }

      test -d .jupyter || mkdir .jupyter 
      cat <<-EOF > .jupyter/jupyter_notebook_config.py
c = get_config()
# define server
c.NotebookApp.ip = '*'
c.NotebookApp.port = $1
c.NotebookApp.open_browser = False
c.NotebookApp.log_level = 'INFO'
c.NotebookApp.notebook_dir = u'/vagrant/IPNB'  
# Preload matplotlib
c.IPKernelApp.matplotlib = 'inline'
EOF
  SHELL

  # .........................................
  # Create the config profiles for defining how Spark notebook submits tasks
  config.vm.provision "09.spark-config",
    type: "shell", 
    privileged: true,
    keep_color: true,    
    args: [ spark_basedir, spark_name, spark_mode, 
            spark_history_server, spark_yarn_master ],
    inline: <<-SHELL
       CFG=/etc/sysconfig/spark-notebook-config

       # The name of the active config
       echo "Configuring Spark mode as: $3"
       echo "$3" > $CFG

       # [A] Config for local mode
       cat <<-EOF > ${CFG}-local
NOTEBOOK_USER=vagrant
NOTEBOOK_SCRIPT="$1/$2/bin/pyspark"

PYSPARK_PYTHON=/opt/ipnb/bin/ext/python2.7
PYSPARK_DRIVER_PYTHON=/opt/ipnb/bin/ext/jupyter-notebook
PYSPARK_SUBMIT_ARGS='--master local[*] --driver-memory 1536M --num-executors 4 --executor-cores 2 --executor-memory 1g'
EOF

       # [B] Config for yarn mode
       cat <<-EOF > ${CFG}-yarn
NOTEBOOK_USER=vagrant
NOTEBOOK_SCRIPT="$1/$2/bin/pyspark"

YARN_CONF_DIR=/opt/hadoop/etc
YARN_OPTS="--conf spark.yarn.historyServer.address=$4"

PYSPARK_PYTHON=/opt/ipnb/bin/ext/python2.7
PYSPARK_DRIVER_PYTHON=/opt/ipnb/bin/ext/jupyter-notebook
PYSPARK_SUBMIT_ARGS="--master yarn-client --deploy-mode client  --driver-memory 1536M  --num-executors 16 --executor-cores 2 --executor-memory 1g $YARN_OPTS"
EOF
      mkdir -p /opt/hadoop/etc 
      if [ "$4" ]; then
        service spark-notebook config-yarn "$5"
      fi 

      # Link the spark startup script, and set it up for starting
      rm -f /etc/init.d/spark-notebook
      chmod 775 /opt/ipnb/bin/ext/spark-notebook
      ln -s /opt/ipnb/bin/ext/spark-notebook /etc/init.d
      chkconfig --add spark-notebook
  SHELL

  # .........................................
  # Start Spark Notebook
  config.vm.provision "10.spark-start", 
    type: "shell", 
    privileged: true,
    keep_color: true,    
    inline: "/etc/init.d/spark-notebook start"


  # config.vm.provision "CDH5", type: "shell", inline: <<-SHELL
  #    sudo yum install centos-release-SCL
  #    sudo yum install python27 python27-scipy python27-python-virtualenv
  #  SHELL

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
